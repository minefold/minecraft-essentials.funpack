#!/usr/bin/env ruby

require 'json'
require 'erb'
require 'find'

ROOT = File.expand_path File.join __FILE__, '../..'

# usage: prepare <world-path> <start-options>
# prepares the world to run
# before this runs, the world will be pulled down and stored at world_path

def level_paths world_dir
  Dir.chdir world_dir do
    level_paths = []
    Find.find('.') do |path|
      if path =~ /\/level\.dat$/
        level_paths << File.dirname(path).gsub(/^\.\//, '')
      end
    end
    level_paths
  end
end

def level_path world_dir
  level_paths(world_dir).min
end

def parse_options json_file
  json_file ? JSON.parse(File.read(json_file)) : {}
end

def write_server_properties world_dir, level_name, options
  template = ERB.new(File.read("#{ROOT}/template/server.properties.erb"))
  File.write "#{world_dir}/server.properties", template.result(binding)
end

def download_server_jar url, world_dir
  puts `curl --silent --show-error -RL #{url} -o '#{world_dir}/server.jar'`
end

# args
world_dir = File.expand_path(ARGV.shift)
start_options_file = ARGV.shift

start_options = parse_options(start_options_file)
@pack_options = start_options['options']
@level_name = level_path(world_dir) || 'level'

Dir.chdir("#{ROOT}/template") do
  Dir["**/*"].reject{|f| File.directory? f }.each do |file|
    dest = File.join world_dir, File.dirname(file), File.basename(file, '.erb')
    `mkdir -p #{File.dirname(dest)}`

    if File.extname(file) == '.erb'
      template = ERB.new(File.read(file))
      File.write(dest, template.result)
    else
      `cp #{file} #{dest}`
    end
  end
end

write_server_properties world_dir, @level_name, @pack_options

File.write "#{world_dir}/ops.txt", @pack_options['ops'].join("\n")
File.write "#{world_dir}/white-list.txt", @pack_options['whitelisted'].join("\n")
File.write "#{world_dir}/banned-players.txt", @pack_options['banned'].join("\n")
